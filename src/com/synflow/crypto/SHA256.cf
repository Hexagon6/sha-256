/*
 * Copyright (c) 2013 Matthieu
 * All rights reserved.
 */

/*
 * Input and output ports
 */
port in sync u32 msg, out sync u256 hash;

u32 Ch(u32 x, u32 y, u32 z) {
	return (x & y) ^ (~x & z);
}

u32 Maj(u32 x, u32 y, u32 z) {
	return (x & y) ^ (x & z) ^ (y & z);
}

u32 sigmaBig0(u32 x) {
	return ((x >> 2) | (x << 30)) ^ ((x >> 13) | (x << 19)) ^ ((x >> 22) | (x << 10));
}

u32 sigmaBig1(u32 x) {
	return ((x >> 6) | (x << 26)) ^ ((x >> 11) | (x << 21)) ^ ((x >> 25) | (x << 7));
}

u32 sigma0(u32 x) {
	return ((x >> 7) | (x << 25)) ^ ((x >> 18) | (x << 14)) ^ (x >> 3);
}

u32 sigma1(u32 x) {
	return ((x >> 17) | (x << 15)) ^ ((x >> 19) | (x << 13)) ^ (x >> 10);
}

u32 H_i[8];

u32 a, b, c, d, e, f, g, h;
u7 t;

u32 W[64];

const u32 K[64] = {
	0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

/**
 * Task
 */
@Test(
	msg = {0x61626380, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x00000018},
	hash = {0xBA7816BF_8F01CFEA_414140DE_5DAE2223_B00361A3_96177A9C_B410FF61_F20015AD}
)
void main() {
	for (t = 0; t < 16; t++) {
		W[t] = msg.read;
		print("W[", t, "] = ", W[t]);
	}
	
	for (; t < 64; t++) {
		W[t] = sigma1(W[t - 2]) + W[t - 7] + sigma0(W[t - 15]) + W[t - 16];
	}

	H_i[0] = 0x6a09e667;
	H_i[1] = 0xbb67ae85;
	H_i[2] = 0x3c6ef372;
	H_i[3] = 0xa54ff53a;
	H_i[4] = 0x510e527f;
	H_i[5] = 0x9b05688c;
	H_i[6] = 0x1f83d9ab;
	H_i[7] = 0x5be0cd19;

	a = H_i[0];
	b = H_i[1];
	c = H_i[2];
	d = H_i[3];
	e = H_i[4];
	f = H_i[5];
	g = H_i[6];
	h = H_i[7];

	for (t = 0; t < 64; t++) {
		u32 T1 = h + sigmaBig1(e) + Ch(e, f, g) + K[t] + W[t];
		u32 T2 = sigmaBig0(a) + Maj(a, b, c);
		h = g;
		g = f;
		f = e;
		e = d + T1;
		d = c;
		c = b;
		b = a;
		a = T1 + T2;
	}

	H_i[0] += a;
	H_i[1] += b;
	H_i[2] += c;
	H_i[3] += d;
	H_i[4] += e;
	H_i[5] += f;
	H_i[6] += g;
	H_i[7] += h;
	
	print("H_i[0] = ", H_i[0]);
	print("H_i[1] = ", H_i[1]);
	print("H_i[2] = ", H_i[2]);
	print("H_i[3] = ", H_i[3]);
	print("H_i[4] = ", H_i[4]);
	print("H_i[5] = ", H_i[5]);
	print("H_i[6] = ", H_i[6]);
	print("H_i[7] = ", H_i[7]);
	
	hash.write(
		H_i[0] << 224 |
		H_i[1] << 192 |
		H_i[2] << 160 |
		H_i[3] << 128 |
		H_i[4] << 96 |
		H_i[5] << 64 |
		H_i[6] << 32 |
		H_i[7]
	);
}
