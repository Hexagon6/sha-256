/*
 * Copyright (c) 2013-2014, Synflow SAS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of Synflow nor the names of its contributors may be
 *     used to endorse or promote products derived from this software without
 *     specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package com.synflow.sha256.step2;

/**
 * This is the top of the optimized implementation of SHA-256.
 * 
 * @author Matthieu Wipliez
 * @author Nicolas Siret
 */
network TopShaStep2 {
	import com.synflow.sha256.SHACommon.*;

	in sync u32 msg_i; out sync u256 hash;

	counterT = new task {
		out bool start, u32 msg, addr_t t_o;

		u7 t;

		/**
		 * This is just an elaborate counter written in a complicated way....
		 * Basically we just write the address to t_o minus one
		 * to account for the delay of computeW so that the values for K and W arrive
		 * at the same time to the main SHA loop (in SHA256_step2).
		 */
		void run() {
			if (msg_i.available) {
				msg.write(msg_i.read);
				start.write(true);
				t_o.write((u6) (t - 1));
				t++;
			} else if (t <= 64) {
				t_o.write((u6) (t - 1));
				t++;
			} else {
				t = 0;
				start.write(false);
			}
		}
	};

	/**
	 * This inner task is really where the optimization is. It replaces the W array
	 * (which was 64x32 registers with a lot of muxes) with an elaborate 16x32 shift register.
	 * This is possible because most accesses to W were sequential so we don't need
	 * a full 64x32 memory. We still do need some because the computation of the current
	 * element goes back up to 15 elements back.
	 * 
	 * The result is 4 times fewer registers and almost no mux. And at the same time,
	 * we doubled throughput compared to the original version. W used to be computed
	 * sequentially, element by element; now it is computed at the same time as the
	 * body loop of SHA256_step2.
	 * 
	 */
	computeW = new task {
		out sync u32 W;

		// State variables
		u32 words[16];
		addr_t t;

		void run() {
			while (!counterT.start.read) {
			}

			u32 m = counterT.msg.read;
			u32 temp = (t < 16) ? m : (u32) (lcSigma1(words[1]) + words[6] + lcSigma0(words[14]) + words[15]);
			//print("W[", t, "] = ", temp);
			W.write(temp);
			t++;

			u5 i;
			for (i = 0; i < 15; i++) {
				words[15 - i] = words[14 - i];
			}
			words[0] = temp;
		}
	};

	/**
	 * This is the same ROM as in step 1.
	 */
	rom = new task {
		properties { reset: null }
		out u32 dout;

		const u32 K[64] = { 0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
		0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1,
		0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d,
		0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
		0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
		0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3,
		0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb,
		0xbef9a3f7, 0xc67178f2 };

		void run() {
			dout.write(K[counterT.t_o.read & 0x3f]);
		}
	};

	sha = new com.synflow.sha256.step2.SHA256_step2();
	sha.reads(computeW.W, rom.dout);
	sha.writes(hash);
}
