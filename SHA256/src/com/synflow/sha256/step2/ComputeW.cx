/*
 * Copyright (c) 2015 Synflow SAS
 * All rights reserved.
 */
 
package com.synflow.sha256.step2;
import com.synflow.sha256.SHACommon.*;

/**
 * This inner task is really where the optimization is. It replaces the W array
 * (which was 64x32 registers with a lot of muxes) with an elaborate 16x32 shift register.
 * This is possible because most accesses to W were sequential so we don't need
 * a full 64x32 memory. We still do need some because the computation of the current
 * element goes back up to 15 elements back.
 * 
 * The result is 4 times fewer registers and almost no mux. And at the same time,
 * we doubled throughput compared to the original version. W used to be computed
 * sequentially, element by element; now it is computed at the same time as the
 * body loop of SHA256_step2.
 * 
 * @author Matthieu Wipliez
 * 
 */

task ComputeW {
	in bool start, u32 msg;
	out sync u32 outW;

	// State variables
	u32 words[16];
	addr_t t;
	void loop() {
		while (!start.read) {
		}

		u32 m = msg.read;
		u32 temp = (t < 16) ? m : (u32) (lcSigma1(words[1]) + words[6] + lcSigma0(words[14]) + words[15]);
		//print("W[", t, "] = ", temp);
		outW.write(temp);
		t++;

		for (u5 i = 0; i < 15; i++) {
			words[15 - i] = words[14 - i];
		}
		words[0] = temp;
	}
}
