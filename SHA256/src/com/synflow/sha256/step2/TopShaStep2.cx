/*
 * Copyright (c) 2013-2015, Synflow SAS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of Synflow nor the names of its contributors may be
 *     used to endorse or promote products derived from this software without
 *     specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package com.synflow.sha256.step2;

/**
 * This is the top of the optimized implementation of SHA-256.
 * 
 * @author Matthieu Wipliez
 * @author Nicolas Siret
 */
network TopShaStep2 {
	import com.synflow.sha256.SHACommon.*;
	import com.synflow.sha256.step2.ComputeW;
	import com.synflow.sha256.step2.Rom;

	in sync u32 msg_i;
	out sync u256 hash;

	counterT = new task {
		out bool start, u32 msg, addr_t t_o;

		u7 t;

		/**
		 * This is just an elaborate counter written in a complicated way....
		 * Basically we just write the address to t_o minus one
		 * to account for the delay of computeW so that the values for K and W arrive
		 * at the same time to the main SHA loop (in SHA256_step2).
		 */
		void loop() {
			if (msg_i.available) {
				msg.write(msg_i.read);
				start.write(true);
				t_o.write((u6) (t - 1));
				t++;
			} else if (t <= 64) {
				t_o.write((u6) (t - 1));
				t++;
			} else {
				t = 0;
				start.write(false);
			}
		}
	};

	computeW = new ComputeW();
	computeW.reads(counterT.start, counterT.msg);

	rom = new Rom();
	rom.reads(counterT.t_o);

	sha = new com.synflow.sha256.step2.SHA256_step2();
	sha.reads(computeW.outW, rom.dout);
	sha.writes(hash);
}
